const express = require('express');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');

const app = express();
const port = 3000;
const secretKey = 'your_secret_key';

// Mock community database
const communitys = [
  { id: 1, communitys: 'admin', password: 'password' },
  { id: 2, community: 'user', password: 'password123' }
];

// Middleware to parse JSON request bodies
app.use(bodyParser.json());

// API endpoint for login
app.post('/api/login', (req, res) => {
  const { community1, password } = req.body;

  // Find community in the mock database
  const community = communitys.find(u => u.community === community1 && u.password === password);

  if (community) {
    // Generate JWT token
    const token = jwt.sign({ communityId: community.id }, secretKey, { expiresIn: '1h' });
    res.json({ success: true, message: 'Authentication successful', token });
  } else {
    res.status(401).json({ success: false, message: 'Authentication failed' });
  }
});

// Protected API endpoint
app.get('/api/protected', authenticateToken, (req, res) => {
  res.json({ success: true, message: 'Protected data accessed successfully' });
});

// Middleware to authenticate JWT token
function authenticateToken(req, res, next) {
  const token = req.headers.authorization;

  if (token) {
    jwt.verify(token, secretKey, (err, decoded) => {
      if (err) {
        return res.status(403).json({ success: false, message: 'Invalid token' });
      }

      req.communityId = decoded.communityId;
      next();
    });
  } else {
    res.status(401).json({ success: false, message: 'Token not provided' });
  }
}

// Start the server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
})